<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>java on Hải Nguyễn Blog</title>
    <link>https://hai-nguyen-21.github.io/tags/java/</link>
    <description>Recent content in java on Hải Nguyễn Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    <managingEditor>hainlph17388@gmail.com (Nguyễn Lê Hải)</managingEditor>
    <webMaster>hainlph17388@gmail.com (Nguyễn Lê Hải)</webMaster>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 08 Sep 2021 12:00:06 +0900</lastBuildDate>
    
        <atom:link href="https://hai-nguyen-21.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Default Mothod - trông cũ mà mới.</title>
        <link>https://hai-nguyen-21.github.io/posts/default-method/</link>
        <pubDate>Wed, 08 Sep 2021 12:00:06 +0900</pubDate>
        <author>hainlph17388@gmail.com (Nguyễn Lê Hải)</author>
        <atom:modified>Wed, 08 Sep 2021 12:00:06 +0900</atom:modified>
        <guid>https://hai-nguyen-21.github.io/posts/default-method/</guid>
        <description>Default Method
 Như chúng ta đã biết từ java 7 đổ xuống thì trong các method trong interface chỉ được phép miêu tả (declaration) mà không được phép định nghĩa nó (definition). Nhưng đối với java 8 thì có thêm 2 khái niệm mới về interface đó là default method.  Trong bài viết lần này, tôi sẽ chỉ giới thiệu về default method thôi nhé.
 Default Method- Phương pháp mặc định:  1.</description>
        
        <dc:creator>Nguyễn Khánh Nam</dc:creator>
        <media:content url="https://hai-nguyen-21.github.io//static/image/content/OOP/anhbiabaiviet.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>java 8</category>
            
          
            
              <category>hoc thuật</category>
            
          
        
        
        
          
            
              <category>Java 8</category>
            
          
        
      </item>
      
      <item>
        <title>Lambda Expression và những điều thú vị..</title>
        <link>https://hai-nguyen-21.github.io/posts/lambda-expression/</link>
        <pubDate>Tue, 07 Sep 2021 12:00:06 +0900</pubDate>
        <author>hainlph17388@gmail.com (Nguyễn Lê Hải)</author>
        <atom:modified>Tue, 07 Sep 2021 12:00:06 +0900</atom:modified>
        <guid>https://hai-nguyen-21.github.io/posts/lambda-expression/</guid>
        <description>Lambda Expression- Tính năng thú vị của Java 8
 Định nghĩa  - Là một hàm không có tên (anonymous function) với các tham số (parameters) và nội dung thực thi (body).
- Nội dung thực thi của Lambda expression có thể là một khối lệnh hoặc một biểu thức.
- Dấu “-&amp;gt;” tách biệt các tham số và nội dung thực thi.
 Cú pháp  (argument-list) -&amp;gt; {body}</description>
        
        <dc:creator>Nguyễn Khánh Nam</dc:creator>
        <media:content url="https://hai-nguyen-21.github.io//static/image/content/OOP/anhbiabaiviet.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>java 8</category>
            
          
            
              <category>học thuật</category>
            
          
        
        
        
          
            
              <category>Java 8</category>
            
          
        
      </item>
      
      <item>
        <title>OOP - Những điều chưa kể (Phần 2)</title>
        <link>https://hai-nguyen-21.github.io/posts/oop2/</link>
        <pubDate>Mon, 06 Sep 2021 12:00:06 +0900</pubDate>
        <author>hainlph17388@gmail.com (Nguyễn Lê Hải)</author>
        <atom:modified>Mon, 06 Sep 2021 12:00:06 +0900</atom:modified>
        <guid>https://hai-nguyen-21.github.io/posts/oop2/</guid>
        <description>Tiếp nối bài viết trước, chúng ta dừng lại ở tính chất thứ nhất, hôm nay tôi sẽ giới thiệu tiếp cho các bạn 3 tính chất còn lại của lập trình hướng đối tượng nhé.
Tâm pháp tầng thứ hai : Encapsulation  Nghe đến đây chắc hẳn các bạn cũng đã mường tượng ra tính chất này nói về cái gì rồi đúng không? Và nội dung của tính chất này được hiểu như sau:</description>
        
        <dc:creator>Hải Nguyễn</dc:creator>
        <media:content url="https://hai-nguyen-21.github.io//static/image/content/OOP/anhbiabaiviet.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>oop</category>
            
          
            
              <category>java</category>
            
          
            
              <category>học thuật</category>
            
          
        
        
        
          
            
              <category>OOP - Những điều chưa kể</category>
            
          
        
      </item>
      
      <item>
        <title>OOP - Những điều chưa kể (Phần 1)</title>
        <link>https://hai-nguyen-21.github.io/posts/oop1/</link>
        <pubDate>Sun, 05 Sep 2021 12:00:06 +0900</pubDate>
        <author>hainlph17388@gmail.com (Nguyễn Lê Hải)</author>
        <atom:modified>Sun, 05 Sep 2021 12:00:06 +0900</atom:modified>
        <guid>https://hai-nguyen-21.github.io/posts/oop1/</guid>
        <description>[NHỮNG ĐIỀU CƠ BẢN VỀ OOP MÀ BẠN CHƯA BIẾT]
Nếu như những ai học lập trình thì không còn quá xa lạ với chủ đề này nhưng để hiểu nó thì không phải ai cũng có thể hiểu được luôn. Chính vì vậy hôm nay mình sẽ giới thiệu lại cho mọi người để có cái nhìn tổng quan và sâu sắc hơn về OOP.
Trong bài viết này mình sẽ lấy ví dụ khá nhiều thông qua ngôn ngữ Java nhé.</description>
        
        <dc:creator>Hải Nguyễn</dc:creator>
        <media:content url="https://hai-nguyen-21.github.io//static/image/content/OOP/anhbiabaiviet.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>oop</category>
            
          
            
              <category>java</category>
            
          
            
              <category>học thuật</category>
            
          
        
        
        
          
            
              <category>OOP - Những điều chưa kể</category>
            
          
        
      </item>
      
      <item>
        <title>Anh em sinh đôi - Abstract Class và Interface</title>
        <link>https://hai-nguyen-21.github.io/posts/so-s%C3%A1nh-l%E1%BB%9Bp-abtract-v%C3%A0-inteface/</link>
        <pubDate>Wed, 10 Mar 2021 12:00:06 +0900</pubDate>
        <author>hainlph17388@gmail.com (Nguyễn Lê Hải)</author>
        <atom:modified>Wed, 10 Mar 2021 12:00:06 +0900</atom:modified>
        <guid>https://hai-nguyen-21.github.io/posts/so-s%C3%A1nh-l%E1%BB%9Bp-abtract-v%C3%A0-inteface/</guid>
        <description>“Anh em sinh đôi ?”
Hey yo what’s up, chào mừng các bạn đã quay trở lại với cái bờ lóc của mình. Cơ duyên để mình lên bài này nó cũng éo le lắm, hôm đó thầy lớp mình có kiểm tra nhanh bài của mấy bạn trong lớp và có hỏi “Thế tại sao chỗ này em không dùng Interface và lại dùng Abstract Class?”, “Thế sự khác nhau giữa hai cái này là gì?</description>
        
        <dc:creator>Hải Nguyễn</dc:creator>
        <media:content url="https://hai-nguyen-21.github.io//static/image/content/OOP/anhbiabaiviet.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>học thuật</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>
